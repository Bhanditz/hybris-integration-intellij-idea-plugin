/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Impex.flex</tt>
 */
class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int WAITING_MACRO_VALUE = 4;
  public static final int MACRO_DECLARATION = 6;
  public static final int HEADER_TYPE = 8;
  public static final int HEADER_LINE = 10;
  public static final int FIELD_VALUE = 12;
  public static final int BEAN_SHELL = 14;
  public static final int MODYFIERS_BLOCK = 16;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 18;
  public static final int HEADER_PARAMETERS = 20;
  public static final int MACRO_USAGE = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 10, 10
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1824 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\172\3\1\6\77\3");

  /* The ZZ_CMAP_A table has 448 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\56\1\4\1\3\22\0\1\4\1\0\1\10\1\5\1\11\1\6\1\42\1\7\1\15\1"+
    "\16\1\0\1\36\1\20\1\22\1\40\1\0\12\37\1\21\1\17\1\54\1\12\1\23\1\0\1\41\1"+
    "\32\2\1\1\47\1\30\1\31\1\55\1\1\1\44\2\1\1\33\1\51\1\45\1\52\1\46\1\1\1\26"+
    "\1\35\1\25\1\27\1\53\4\1\1\13\1\0\1\14\1\0\1\50\1\0\1\32\2\1\1\47\1\30\1\31"+
    "\1\55\1\1\1\44\2\1\1\33\1\51\1\45\1\52\1\46\1\1\1\26\1\35\1\25\1\27\1\53\4"+
    "\1\1\0\1\24\10\0\1\56\252\0\2\43\115\0\1\34\50\0\2\56\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\1\2\3\0\1\3\1\4\2\5"+
    "\1\6\1\7\2\3\1\10\2\4\1\3\1\4\1\1"+
    "\1\6\5\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\6\11\1\20\4\11\1\21\1\22\1\23\1\3\1\24"+
    "\1\25\1\26\1\27\2\3\4\30\1\31\1\32\1\33"+
    "\1\30\1\34\3\30\1\20\1\30\1\2\1\6\1\2"+
    "\1\35\1\3\1\36\1\37\1\40\4\41\1\42\3\41"+
    "\1\20\1\43\1\0\1\44\1\45\2\4\1\0\1\4"+
    "\1\0\1\46\1\45\4\11\1\20\1\0\1\47\1\0"+
    "\1\11\2\0\1\50\1\51\2\30\1\0\1\2\1\41"+
    "\1\46\1\44\1\45\3\41\1\0\1\52\2\4\1\0"+
    "\1\4\1\46\1\0\4\11\1\20\1\0\1\11\1\0"+
    "\2\30\1\2\1\46\3\41\1\20\2\4\1\0\1\4"+
    "\1\53\2\11\2\0\1\11\1\0\2\53\2\4\1\0"+
    "\1\4\2\11\1\53\1\0\1\11\1\0\1\54\1\55"+
    "\2\56\1\57\1\60\2\61\2\0\1\4\1\0\1\11"+
    "\2\0\1\4\1\0\1\11\1\62\1\0\1\4\1\0"+
    "\1\11\1\0\1\4\1\0\1\11\1\0\1\4\1\0"+
    "\1\11\1\0\1\4\1\0\1\11\2\63\2\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0205\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u0205\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0205\0\u0468\0\u0497\0\u02f0\0\u04c6\0\u0205"+
    "\0\u0205\0\u0205\0\u0205\0\u0205\0\u0205\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u0205\0\u06fa\0\u0729\0\u04c6\0\u0205\0\u0205\0\u0205\0\u0205"+
    "\0\u063e\0\u0758\0\u0205\0\u0787\0\u02f0\0\u04c6\0\u0205\0\u0205"+
    "\0\u0205\0\u07b6\0\u0205\0\u07e5\0\u0814\0\u05e0\0\u0843\0\u06cb"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u0497\0\u0205\0\u0205\0\u0205"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u0205\0\u09ea\0\u0a19\0\u0a48"+
    "\0\u0a77\0\u0205\0\u02f0\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62"+
    "\0\u0b91\0\u0bc0\0\u0bef\0\u04c6\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab"+
    "\0\u0cda\0\u0d09\0\u063e\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0758"+
    "\0\u0205\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e"+
    "\0\u09bb\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0205\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u0205\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u0d09\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u092e"+
    "\0\u12ba\0\u12e9\0\u1318\0\u0f9b\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\u0468\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u0787"+
    "\0\u092e\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u0205"+
    "\0\u1637\0\u1666\0\u1695\0\u0234\0\u0234\0\u16c4\0\u16f3\0\u0468"+
    "\0\u0468\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c"+
    "\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u0205\0\u1956\0\u1985"+
    "\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd"+
    "\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u0205\0\u0234"+
    "\0\u0205\0\u0468";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\14\1\22"+
    "\1\23\5\14\1\24\2\14\1\15\2\14\1\15\1\25"+
    "\1\26\4\15\1\14\1\15\1\14\1\15\3\14\1\27"+
    "\1\30\7\15\1\14\1\15\1\0\2\31\1\16\1\17"+
    "\1\32\52\31\1\33\1\34\1\16\1\17\1\20\2\33"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\33\1\45\1\33\1\46\2\33\1\47\1\50\1\51"+
    "\1\34\1\52\2\34\1\33\1\34\1\53\1\54\1\33"+
    "\1\55\1\33\1\56\1\57\7\34\1\60\1\34\1\33"+
    "\2\14\1\16\1\17\1\20\5\14\1\61\43\14\1\0"+
    "\1\14\1\62\1\16\1\17\1\20\15\14\1\62\2\14"+
    "\7\62\1\14\1\62\1\14\1\62\4\14\10\62\1\14"+
    "\1\62\1\0\1\14\1\63\1\16\1\17\1\20\4\14"+
    "\1\64\1\65\1\66\1\42\1\43\1\44\1\67\1\45"+
    "\1\14\1\63\1\14\1\70\7\63\1\14\1\63\1\14"+
    "\1\63\1\14\1\71\1\72\1\14\10\63\1\14\1\63"+
    "\1\0\1\73\1\74\1\16\1\17\1\20\3\73\1\75"+
    "\1\76\5\73\1\77\1\100\1\101\1\102\1\73\1\103"+
    "\1\104\3\74\1\105\2\74\1\73\1\74\1\106\1\107"+
    "\4\73\10\74\1\110\1\74\1\73\2\111\1\16\1\17"+
    "\1\112\3\111\1\113\46\111\1\14\1\114\1\16\1\17"+
    "\1\20\2\14\1\115\1\22\1\64\1\65\1\14\1\116"+
    "\3\14\1\117\1\14\1\114\1\14\1\120\7\114\1\14"+
    "\1\114\1\14\2\114\3\14\10\114\1\14\1\114\1\0"+
    "\2\121\1\16\1\17\1\20\2\121\1\122\1\123\1\124"+
    "\2\121\1\116\3\121\1\125\1\121\1\126\2\121\1\127"+
    "\3\121\1\130\4\121\1\126\1\131\17\121\2\14\1\16"+
    "\1\17\1\20\51\14\61\0\1\15\20\0\1\15\2\0"+
    "\7\15\1\0\1\15\1\0\1\15\4\0\10\15\1\0"+
    "\1\15\3\0\1\16\60\0\1\20\60\0\1\132\50\0"+
    "\10\133\1\134\46\133\1\0\1\135\20\0\1\135\2\0"+
    "\7\135\1\0\1\135\1\0\1\135\4\0\10\135\1\0"+
    "\1\135\2\0\1\15\20\0\1\15\2\0\3\15\1\136"+
    "\3\15\1\0\1\15\1\0\1\15\4\0\10\15\1\0"+
    "\1\15\2\0\1\15\20\0\1\15\2\0\7\15\1\0"+
    "\1\15\1\0\1\15\4\0\2\15\1\137\5\15\1\0"+
    "\1\15\46\0\1\140\12\0\1\15\20\0\1\15\2\0"+
    "\7\15\1\0\1\15\1\0\1\15\4\0\1\15\1\141"+
    "\6\15\1\0\1\15\1\0\2\31\2\0\55\31\2\0"+
    "\1\32\52\31\1\0\1\34\20\0\1\34\2\0\7\34"+
    "\1\0\1\34\1\0\1\34\4\0\10\34\1\0\1\34"+
    "\1\0\2\142\2\0\3\142\1\143\47\142\1\0\1\144"+
    "\20\0\1\144\2\0\7\144\1\0\1\144\1\0\1\144"+
    "\4\0\10\144\1\0\1\144\2\0\1\34\20\0\1\34"+
    "\2\0\7\34\1\0\1\34\1\0\1\54\4\0\10\34"+
    "\1\0\1\34\2\0\1\34\20\0\1\34\2\0\1\34"+
    "\1\145\5\34\1\0\1\34\1\0\1\34\4\0\10\34"+
    "\1\0\1\34\2\0\1\34\20\0\1\34\2\0\3\34"+
    "\1\146\3\34\1\0\1\34\1\0\1\34\4\0\10\34"+
    "\1\0\1\34\2\0\1\34\20\0\1\34\2\0\7\34"+
    "\1\0\1\34\1\0\1\34\4\0\2\34\1\147\5\34"+
    "\1\0\1\34\2\0\1\34\20\0\1\34\2\0\5\34"+
    "\1\150\1\34\1\0\1\34\1\0\1\34\4\0\10\34"+
    "\1\0\1\34\40\0\1\151\20\0\1\34\20\0\1\34"+
    "\2\0\7\34\1\0\1\34\1\0\1\54\1\152\3\0"+
    "\10\34\1\0\1\34\2\0\1\153\20\0\1\153\2\0"+
    "\7\153\1\0\1\153\1\0\1\153\4\0\10\153\1\0"+
    "\1\153\46\0\1\154\12\0\1\34\20\0\1\34\2\0"+
    "\7\34\1\0\1\34\1\0\1\34\4\0\1\34\1\155"+
    "\6\34\1\0\1\34\44\0\2\156\13\0\1\62\20\0"+
    "\1\62\2\0\7\62\1\0\1\62\1\0\1\62\4\0"+
    "\10\62\1\0\1\62\2\0\1\63\20\0\1\63\2\0"+
    "\7\63\1\0\1\63\1\0\1\63\1\157\3\0\10\63"+
    "\1\0\1\63\2\0\1\160\20\0\1\160\2\0\7\160"+
    "\1\0\1\160\1\0\1\160\4\0\10\160\1\0\1\160"+
    "\2\0\1\74\20\0\1\74\2\0\7\74\1\0\1\74"+
    "\1\0\1\74\4\0\10\74\1\0\1\74\2\0\1\74"+
    "\20\0\1\74\1\161\1\0\7\74\1\0\1\74\1\0"+
    "\1\107\4\0\10\74\1\0\1\74\2\0\1\74\20\0"+
    "\1\74\2\0\1\74\1\162\5\74\1\0\1\74\1\0"+
    "\1\74\4\0\10\74\1\0\1\74\2\0\1\74\20\0"+
    "\1\74\2\0\5\74\1\163\1\74\1\0\1\74\1\0"+
    "\1\74\4\0\10\74\1\0\1\74\2\0\1\74\20\0"+
    "\1\74\2\0\7\74\1\0\1\74\1\0\1\107\1\152"+
    "\3\0\10\74\1\0\1\74\1\0\2\111\2\0\55\111"+
    "\2\0\1\112\52\111\2\113\2\164\4\113\1\165\46\113"+
    "\1\0\1\114\20\0\1\114\2\0\7\114\1\0\1\114"+
    "\1\0\2\114\3\0\10\114\1\0\1\114\1\0\2\121"+
    "\3\0\7\121\1\0\3\121\1\0\36\121\2\166\2\0"+
    "\1\142\2\166\1\167\4\166\1\142\3\166\1\142\36\166"+
    "\2\123\3\133\3\123\1\170\3\123\1\133\3\123\1\133"+
    "\36\123\1\121\1\171\3\0\7\121\1\0\3\121\1\0"+
    "\1\121\1\171\2\121\7\171\1\121\1\171\1\121\1\171"+
    "\4\121\10\171\1\121\1\171\3\121\3\0\7\121\1\0"+
    "\3\121\1\0\16\121\1\131\21\121\3\0\7\121\1\0"+
    "\3\121\1\0\5\121\1\172\32\121\3\0\7\121\1\0"+
    "\3\121\1\0\11\121\1\173\26\121\3\0\7\121\1\0"+
    "\3\121\1\0\16\121\1\131\1\174\16\121\10\0\1\133"+
    "\47\0\1\135\2\0\1\175\5\0\1\176\7\0\1\135"+
    "\2\0\7\135\1\0\1\135\1\0\1\135\4\0\10\135"+
    "\1\0\1\135\2\0\1\15\20\0\1\15\2\0\7\15"+
    "\1\0\1\15\1\0\1\15\4\0\5\15\1\177\2\15"+
    "\1\0\1\15\2\0\1\15\20\0\1\15\2\0\7\15"+
    "\1\0\1\15\1\0\1\15\4\0\3\15\1\200\4\15"+
    "\1\0\1\15\35\0\2\201\22\0\1\15\20\0\1\15"+
    "\2\0\7\15\1\201\1\202\1\0\1\15\4\0\10\15"+
    "\1\0\1\15\1\0\2\142\2\0\3\142\1\203\47\142"+
    "\7\0\1\204\50\0\1\34\20\0\1\34\2\0\2\34"+
    "\1\205\4\34\1\0\1\34\1\0\1\34\4\0\10\34"+
    "\1\0\1\34\2\0\1\34\20\0\1\34\2\0\7\34"+
    "\1\0\1\34\1\0\1\34\4\0\5\34\1\206\2\34"+
    "\1\0\1\34\2\0\1\34\20\0\1\34\2\0\7\34"+
    "\1\0\1\34\1\0\1\34\4\0\3\34\1\207\4\34"+
    "\1\0\1\34\2\0\1\34\20\0\1\34\2\0\6\34"+
    "\1\210\1\0\1\34\1\0\1\34\4\0\10\34\1\0"+
    "\1\34\40\0\1\151\1\152\55\0\1\211\53\0\2\212"+
    "\22\0\1\34\20\0\1\34\2\0\7\34\1\212\1\213"+
    "\1\0\1\34\4\0\10\34\1\0\1\34\56\0\1\214"+
    "\2\0\1\63\20\0\1\63\2\0\7\63\1\0\1\63"+
    "\1\0\1\63\4\0\10\63\1\0\1\63\2\0\1\74"+
    "\20\0\1\74\2\0\2\74\1\215\4\74\1\0\1\74"+
    "\1\0\1\74\4\0\10\74\1\0\1\74\2\0\1\74"+
    "\20\0\1\74\2\0\6\74\1\216\1\0\1\74\1\0"+
    "\1\74\4\0\10\74\1\0\1\74\1\0\10\164\1\217"+
    "\46\164\2\111\2\0\4\111\1\113\46\111\2\166\2\0"+
    "\1\142\2\166\1\220\4\166\1\142\3\166\1\142\36\166"+
    "\2\121\3\0\2\121\1\221\4\121\1\0\3\121\1\0"+
    "\40\121\3\0\3\121\1\123\3\121\1\0\3\121\1\0"+
    "\40\121\3\0\7\121\1\0\3\121\1\0\6\121\1\222"+
    "\31\121\3\0\7\121\1\0\3\121\1\0\12\121\1\223"+
    "\25\121\3\0\7\121\1\0\3\121\1\0\16\121\1\224"+
    "\17\121\4\0\1\175\5\0\1\176\45\0\1\15\20\0"+
    "\1\15\2\0\7\15\1\0\1\15\1\0\1\15\4\0"+
    "\6\15\1\225\1\15\1\0\1\15\2\0\1\15\20\0"+
    "\1\15\2\0\5\15\1\226\1\15\1\0\1\15\1\0"+
    "\1\15\4\0\10\15\1\0\1\15\31\0\1\227\27\0"+
    "\1\15\20\0\1\15\2\0\3\15\1\230\3\15\1\0"+
    "\1\15\1\0\1\15\4\0\10\15\1\0\1\15\10\0"+
    "\1\203\50\0\1\34\20\0\1\34\2\0\3\34\1\231"+
    "\3\34\1\0\1\34\1\0\1\34\4\0\10\34\1\0"+
    "\1\34\2\0\1\34\20\0\1\34\2\0\7\34\1\0"+
    "\1\34\1\0\1\34\4\0\6\34\1\232\1\34\1\0"+
    "\1\34\2\0\1\34\20\0\1\34\2\0\5\34\1\233"+
    "\1\34\1\0\1\34\1\0\1\34\4\0\10\34\1\0"+
    "\1\34\2\0\1\34\20\0\1\34\2\0\7\34\1\234"+
    "\1\205\1\0\1\34\4\0\10\34\1\0\1\34\31\0"+
    "\1\235\27\0\1\34\20\0\1\34\2\0\3\34\1\236"+
    "\3\34\1\0\1\34\1\0\1\34\4\0\10\34\1\0"+
    "\1\34\46\0\1\237\12\0\1\74\20\0\1\74\2\0"+
    "\3\74\1\240\3\74\1\0\1\74\1\0\1\74\4\0"+
    "\10\74\1\0\1\74\2\0\1\74\20\0\1\74\2\0"+
    "\7\74\1\234\1\215\1\0\1\74\4\0\10\74\1\0"+
    "\1\74\11\0\1\164\46\0\2\121\3\0\2\121\1\220"+
    "\4\121\1\0\3\121\1\0\40\121\3\0\7\121\1\0"+
    "\3\121\1\0\7\121\1\241\30\121\3\0\7\121\1\0"+
    "\3\121\1\0\13\121\2\222\21\121\1\0\1\15\20\0"+
    "\1\15\2\0\7\15\1\0\1\15\1\0\1\15\4\0"+
    "\7\15\1\242\1\0\1\15\2\0\1\15\20\0\1\15"+
    "\2\0\1\243\6\15\1\0\1\15\1\0\1\15\4\0"+
    "\10\15\1\0\1\15\27\0\1\244\31\0\1\15\20\0"+
    "\1\15\2\0\1\15\1\245\5\15\1\0\1\15\1\0"+
    "\1\15\4\0\10\15\1\0\1\15\2\0\1\34\20\0"+
    "\1\34\2\0\7\34\1\0\1\34\1\0\1\34\4\0"+
    "\7\34\1\246\1\0\1\34\2\0\1\34\20\0\1\34"+
    "\2\0\1\247\6\34\1\0\1\34\1\0\1\34\4\0"+
    "\10\34\1\0\1\34\31\0\1\250\54\0\1\251\31\0"+
    "\1\34\20\0\1\34\2\0\1\34\1\252\5\34\1\0"+
    "\1\34\1\0\1\34\4\0\10\34\1\0\1\34\53\0"+
    "\1\253\5\0\1\15\20\0\1\15\2\0\3\15\1\254"+
    "\3\15\1\0\1\15\1\0\1\15\4\0\10\15\1\0"+
    "\1\15\2\0\1\15\20\0\1\15\2\0\3\15\1\255"+
    "\3\15\1\0\1\15\1\0\1\15\4\0\10\15\1\0"+
    "\1\15\26\0\1\256\32\0\1\15\20\0\1\15\2\0"+
    "\1\257\6\15\1\0\1\15\1\0\1\15\4\0\10\15"+
    "\1\0\1\15\2\0\1\34\20\0\1\34\2\0\3\34"+
    "\1\260\3\34\1\0\1\34\1\0\1\34\4\0\10\34"+
    "\1\0\1\34\2\0\1\34\20\0\1\34\2\0\3\34"+
    "\1\261\3\34\1\0\1\34\1\0\1\34\4\0\10\34"+
    "\1\0\1\34\26\0\1\262\32\0\1\34\20\0\1\34"+
    "\2\0\1\263\6\34\1\0\1\34\1\0\1\34\4\0"+
    "\10\34\1\0\1\34\27\0\1\264\100\0\1\265\7\0"+
    "\1\15\20\0\1\15\2\0\7\15\1\0\1\15\1\0"+
    "\1\15\4\0\4\15\1\266\3\15\1\0\1\15\51\0"+
    "\1\267\7\0\1\34\20\0\1\34\2\0\7\34\1\0"+
    "\1\34\1\0\1\34\4\0\4\34\1\270\3\34\1\0"+
    "\1\34\31\0\1\271\55\0\1\272\30\0\1\15\20\0"+
    "\1\15\2\0\2\15\1\273\4\15\1\0\1\15\1\0"+
    "\1\15\4\0\10\15\1\0\1\15\30\0\1\274\30\0"+
    "\1\34\20\0\1\34\2\0\2\34\1\275\4\34\1\0"+
    "\1\34\1\0\1\34\4\0\10\34\1\0\1\34\24\0"+
    "\1\276\101\0\1\277\11\0\1\15\20\0\1\15\2\0"+
    "\7\15\1\0\1\15\1\0\1\15\4\0\2\15\1\300"+
    "\5\15\1\0\1\15\47\0\1\301\11\0\1\34\20\0"+
    "\1\34\2\0\7\34\1\0\1\34\1\0\1\34\4\0"+
    "\2\34\1\302\5\34\1\0\1\34\50\0\1\303\10\0"+
    "\1\15\20\0\1\15\2\0\7\15\1\0\1\15\1\0"+
    "\1\15\4\0\3\15\1\304\4\15\1\0\1\15\50\0"+
    "\1\305\10\0\1\34\20\0\1\34\2\0\7\34\1\0"+
    "\1\34\1\0\1\34\4\0\3\34\1\306\4\34\1\0"+
    "\1\34\33\0\1\307\25\0\1\15\20\0\1\15\2\0"+
    "\5\15\1\310\1\15\1\0\1\15\1\0\1\15\4\0"+
    "\10\15\1\0\1\15\33\0\1\311\25\0\1\34\20\0"+
    "\1\34\2\0\5\34\1\312\1\34\1\0\1\34\1\0"+
    "\1\34\4\0\10\34\1\0\1\34\26\0\1\313\32\0"+
    "\1\15\20\0\1\15\2\0\1\314\6\15\1\0\1\15"+
    "\1\0\1\15\4\0\10\15\1\0\1\15\26\0\1\315"+
    "\32\0\1\34\20\0\1\34\2\0\1\316\6\34\1\0"+
    "\1\34\1\0\1\34\4\0\10\34\1\0\1\34\31\0"+
    "\1\317\27\0\1\15\20\0\1\15\2\0\3\15\1\320"+
    "\3\15\1\0\1\15\1\0\1\15\4\0\10\15\1\0"+
    "\1\15\31\0\1\321\27\0\1\34\20\0\1\34\2\0"+
    "\3\34\1\322\3\34\1\0\1\34\1\0\1\34\4\0"+
    "\10\34\1\0\1\34\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7238];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\1\3\0\1\11\1\1\1\11"+
    "\5\1\1\11\6\1\1\11\4\1\6\11\13\1\1\11"+
    "\3\1\4\11\2\1\1\11\3\1\3\11\1\1\1\11"+
    "\12\1\3\11\4\1\1\11\4\1\1\11\1\0\4\1"+
    "\1\0\1\1\1\0\7\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\11\2\1\1\0\10\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\11\1\0\5\1\1\0\1\1"+
    "\1\0\12\1\1\0\4\1\2\0\1\1\1\0\4\1"+
    "\1\0\3\1\1\11\1\0\1\1\1\0\10\1\2\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ImpexTypes.COMMENT_BODY;
            }
          case 53: break;
          case 2: 
            { return ImpexTypes.BEAN_SHELL_BODY;
            }
          case 54: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            }
          case 55: break;
          case 4: 
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            }
          case 56: break;
          case 5: 
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            }
          case 57: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            }
          case 58: break;
          case 7: 
            { yybegin(COMMENT); return ImpexTypes.COMMENT_MARKER;
            }
          case 59: break;
          case 8: 
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          case 60: break;
          case 9: 
            { return ImpexTypes.MACRO_VALUE;
            }
          case 61: break;
          case 10: 
            { return ImpexTypes.ASSIGN_VALUE;
            }
          case 62: break;
          case 11: 
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          case 63: break;
          case 12: 
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          case 64: break;
          case 13: 
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            }
          case 65: break;
          case 14: 
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            }
          case 66: break;
          case 15: 
            { return ImpexTypes.COMMA;
            }
          case 67: break;
          case 16: 
            { return ImpexTypes.DIGIT;
            }
          case 68: break;
          case 17: 
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          case 69: break;
          case 18: 
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            }
          case 70: break;
          case 19: 
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            }
          case 71: break;
          case 20: 
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          case 72: break;
          case 21: 
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          case 73: break;
          case 22: 
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          case 74: break;
          case 23: 
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            }
          case 75: break;
          case 24: 
            { return ImpexTypes.FIELD_VALUE;
            }
          case 76: break;
          case 25: 
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          case 77: break;
          case 26: 
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            }
          case 78: break;
          case 27: 
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            }
          case 79: break;
          case 28: 
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          case 80: break;
          case 29: 
            { return ImpexTypes.ATTRIBUTE_NAME;
            }
          case 81: break;
          case 30: 
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          case 82: break;
          case 31: 
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          case 83: break;
          case 32: 
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          case 84: break;
          case 33: 
            { return ImpexTypes.ATTRIBUTE_VALUE;
            }
          case 85: break;
          case 34: 
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          case 86: break;
          case 35: 
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            }
          case 87: break;
          case 36: 
            { return ImpexTypes.DOUBLE_STRING;
            }
          case 88: break;
          case 37: 
            { return ImpexTypes.MACRO_USAGE;
            }
          case 89: break;
          case 38: 
            { return ImpexTypes.SINGLE_STRING;
            }
          case 90: break;
          case 39: 
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            }
          case 91: break;
          case 40: 
            { return ImpexTypes.DOCUMENT_ID;
            }
          case 92: break;
          case 41: 
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            }
          case 93: break;
          case 42: 
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            }
          case 94: break;
          case 43: 
            { return ImpexTypes.BOOLEAN;
            }
          case 95: break;
          case 44: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            }
          case 96: break;
          case 45: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            }
          case 97: break;
          case 46: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            }
          case 98: break;
          case 47: 
            { return ImpexTypes.HEADER_MODE_REMOVE;
            }
          case 99: break;
          case 48: 
            { return ImpexTypes.HEADER_MODE_UPDATE;
            }
          case 100: break;
          case 49: 
            { return ImpexTypes.HEADER_MODE_INSERT;
            }
          case 101: break;
          case 50: 
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            }
          case 102: break;
          case 51: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          case 103: break;
          case 52: 
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
